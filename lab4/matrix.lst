     1                                  %include "lib.asm"
     2                              <1> section .text     ; ������� ����
     3                              <1> IntToStr64: 
     4 00000000 57                  <1>          push   rdi
     5 00000001 53                  <1>          push   rbx
     6 00000002 52                  <1>          push   rdx
     7 00000003 51                  <1>          push   rcx
     8 00000004 56                  <1> 		 push   rsi
     9 00000005 C60600              <1> 		 mov    byte[rsi],0 ; �� ����� �����
    10 00000008 83F800              <1>          cmp    eax,0
    11 0000000B 7D05                <1>          jge    .l1
    12 0000000D F7D8                <1>          neg    eax
    13 0000000F C6062D              <1>          mov    byte[rsi],'-'
    14 00000012 C646060A            <1> .l1      mov    byte[rsi+6],10
    15 00000016 BF05000000          <1>          mov    rdi,5
    16 0000001B 66BB0A00            <1>          mov    bx,10
    17 0000001F 6699                <1> .again:  cwd           ; ��������� ����� �� ��������
    18 00000021 66F7F3              <1>          div    bx     ; ����� ��������� �� 10
    19 00000024 80C230              <1>          add    dl,30h ; �������� �� ������� ��� �����
    20 00000027 88143E              <1>          mov    [rsi+rdi],dl ; ����� ������ � ������
    21 0000002A 48FFCF              <1>          dec    rdi    ; ��������� ��������� ��  
    22                              <1>                        ; ���������� �������
    23 0000002D 6683F800            <1>          cmp    ax, 0  ; ������������� ��� �����?
    24 00000031 75EC                <1>          jne    .again
    25 00000033 B906000000          <1>          mov    rcx, 6
    26 00000038 4829F9              <1>          sub    rcx, rdi ; ����� ����������+����
    27 0000003B 4889C8              <1> 		 mov    rax,rcx
    28 0000003E 48FFC0              <1> 		 inc    rax    ; ����� ����������+OA
    29 00000041 48FFC6              <1>          inc    rsi    ; ���������� ����
    30 00000044 56                  <1> 		 push   rsi
    31 00000045 488D343E            <1>          lea    rsi,[rsi+rdi] ; ������ ����������
    32 00000049 5F                  <1> 		 pop    rdi
    33 0000004A F3A4                <1>          rep movsb
    34 0000004C 5E                  <1>          pop    rsi  
    35 0000004D 59                  <1>          pop    rcx
    36 0000004E 5A                  <1>          pop    rdx
    37 0000004F 5B                  <1>          pop    rbx
    38 00000050 5F                  <1>          pop    rdi
    39 00000051 C3                  <1>          ret
    40                              <1> StrToInt64:
    41 00000052 57                  <1>          push   rdi
    42 00000053 B739                <1>          mov    bh, '9'
    43 00000055 B330                <1>          mov    bl, '0'
    44 00000057 56                  <1>          push   rsi     ; ��������� ����� �������� ������
    45 00000058 803E2D              <1>          cmp    byte[rsi], '-'
    46 0000005B 7503                <1>          jne    .prod
    47 0000005D 48FFC6              <1>          inc    rsi     ; ���������� ����
    48 00000060 FC                  <1> .prod    cld
    49 00000061 6631FF              <1>          xor    di, di  ; �������� ������� �����
    50 00000064 AC                  <1> .cycle:  lodsb          ; ��������� ������ (�����)
    51 00000065 3C0A                <1>          cmp    al, 10  ; ���� 10, �� �� �����
    52 00000067 741F                <1>          je     .Return
    53 00000069 38D8                <1>          cmp    al, bl  ; ���������� � ����� ����
    54 0000006B 722F                <1>          jb     .Error  ; "����" � ������
    55 0000006D 38F8                <1>          cmp    al, bh  ; ���������� � ����� ������ 
    56 0000006F 772B                <1>          ja     .Error  ; "����" � ������
    57 00000071 2C30                <1>          sub    al, 30h ; �������� ����� �� �������
    58 00000073 6698                <1>          cbw            ; ��������� �� �����
    59 00000075 6650                <1>          push   ax      ; ��������� � �����
    60 00000077 66B80A00            <1>          mov    ax, 10  ; ������� 10 � AX
    61 0000007B 66F7E7              <1>          mul    di      ; ��������, ��������� � DX:AX
    62 0000007E 665F                <1>          pop    di      ; � DI � ��������� �����
    63 00000080 6601F8              <1>          add    ax, di
    64 00000083 6689C7              <1>          mov    di, ax  ; � DI � ����������� �����        
    65 00000086 EBDC                <1>          jmp    .cycle
    66 00000088 5E                  <1> .Return: pop    rsi
    67 00000089 BB00000000          <1>          mov    rbx, 0
    68 0000008E 803E2D              <1>          cmp    byte[rsi], '-'
    69 00000091 7503                <1>          jne    .J
    70 00000093 66F7DF              <1>          neg    di
    71 00000096 6689F8              <1> .J       mov    ax, di
    72 00000099 98                  <1>          cwde
    73 0000009A EB0B                <1>          jmp    .R
    74 0000009C 5E                  <1> .Error:  pop    rsi
    75 0000009D B800000000          <1>          mov    rax, 0
    76 000000A2 BB01000000          <1>          mov    rbx, 1
    77 000000A7 5F                  <1> .R       pop    rdi
    78 000000A8 C3                  <1>          ret
     2                                  
     3                                  section .data
     4 00000000 FEFFFFFF03000000        matrix: dd -2, 3
     5 00000008 FDFFFFFF03000000                dd -3, 3
     6                                  
     7 00000010 4C696E652077697468-     ExitMsg db "Line with zero sum is found", 0xA ; выводимое сообщение
     7 00000019 207A65726F2073756D-
     7 00000022 20697320666F756E64-
     7 0000002B 0A                 
     8 0000002C 200A                    Space db " ", 0xA
     9 0000002E 0A                      NewLine: db 0xA
    10                                  lenExit equ $-ExitMsg
    11                                  
    12 0000002F 526573756C74206D61-     ResMsg db "Result matrix looks following : ", 0xA ; выводимое сообщение
    12 00000038 74726978206C6F6F6B-
    12 00000041 7320666F6C6C6F7769-
    12 0000004A 6E67203A200A       
    13                                  lenRes equ $-ResMsg
    14                                  
    15                                  section .bss
    16 00000000 ????                        OutBuf resb 2 ; буфер для выводимой строки, он должен быть 2 или 4
    17                                      lenOut equ $-OutBuf
    18                                  
    19 00000002 ????????????????            Buf   resb 8
    20                                      lineBuf equ $-Buf
    21 0000000A <res Ah>                    res   resb 10
    22 00000014 <res Ah>                    InBuf resb 10 ; буфер для вводимой строки
    23                                      lenIn equ $-InBuf
    24                                  
    25                                  section .text
    26                                      global _start
    27                                  
    28                                  _start:
    29                                  
    30                                      ; mov rbx, 0 ; смещение элемента столбца в строке
    31                                      ; mov rcx, 2 ; количество столбцов
    32                                      
    33                                  ;мы проходимся по столбцам
    34                                  ; cyclePrint1: 
    35                                  ;     push rcx ; сохраняем счетчик
    36                                  ;     mov rcx, 1 ; счетчик элементов в столбце
    37                                      
    38                                  ;     push rcx ; сохраняем счетчик
    39                                  ;     push rsi
    40                                  
    41                                  ;     mov rax, [rbx + matrix]
    42                                  ;     mov rsi, OutBuf
    43                                  ;     call IntToStr64
    44                                  
    45                                  ;     ; print the number    
    46                                  ;     mov rax, 1
    47                                  ;     mov rdi, 1
    48                                  ;     mov rsi, OutBuf
    49                                  ;     mov rdx, lenOut
    50                                  ;     syscall
    51                                  
    52                                  ;     ; print the number    
    53                                  ;     mov rax, 1
    54                                  ;     mov rdi, 1
    55                                  ;     mov rsi, Space
    56                                  ;     mov rdx, 1
    57                                  ;     syscall
    58                                  
    59                                  ;     pop rsi
    60                                  ;     pop rcx
    61                                  
    62                                  ;     mov rsi, 4 ; смещение для другого столбца, но все той-же строки
    63                                  ; cyclePrint2:
    64                                  ;     push rcx ; сохраняем счетчик
    65                                  ;     push rsi
    66                                  
    67                                  ;     mov rax, [rbx + rsi + matrix]
    68                                  ;     mov rsi, OutBuf
    69                                  ;     call IntToStr64
    70                                  
    71                                  ;     ; print the number    
    72                                  ;     mov rax, 1
    73                                  ;     mov rdi, 1
    74                                  ;     mov rsi, OutBuf
    75                                  ;     mov rdx, lenOut
    76                                  ;     syscall
    77                                  
    78                                  ;     ; print the space    
    79                                  ;     mov rax, 1
    80                                  ;     mov rdi, 1
    81                                  ;     mov rsi, Space
    82                                  ;     mov rdx, 1
    83                                  ;     syscall
    84                                  
    85                                  ;     pop rsi
    86                                  
    87                                  ;     add rsi, 4; смещение для другого столбца, но все той-же строки
    88                                  ;     pop rcx
    89                                  ;     loop cyclePrint2 ; цикл по элементам столбца
    90                                  
    91                                  ;     ; print the NewLinw character
    92                                  ;     mov rax, 1
    93                                  ;     mov rdi, 1
    94                                  ;     mov rsi, NewLine
    95                                  ;     mov rdx, 1
    96                                  ;     syscall
    97                                  
    98                                  ;     pop rcx
    99                                  
   100                                  ;     add rbx, 8 ; перешли к следующей строке
   101                                  ;     dec rcx
   102                                  ;     jnz cyclePrint1 ; цикл по столбцам
   103                                  
   104                                  
   105                                  
   106                                  
   107                                  
   108                                  
   109                                      ;я ёбаный гений блять
   110 000000A9 BB00000000                  mov rbx, 0 ; смещение элемента столбца в строке
   111 000000AE B902000000                  mov rcx, 2 ; количество строк
   112                                  cycle1:
   113 000000B3 51                          push rcx ; сохраняем счетчик
   114 000000B4 B901000000                  mov rcx, 1 ; счетчик элементов в строке - 1
   115 000000B9 488B83[00000000]            mov rax, [rbx + matrix]; будем использовать как сумму элементов для строки
   116 000000C0 BE04000000                  mov rsi, 4 ; проходимся по элементам строки
   117                                  cycle2:
   118 000000C5 48038433[00000000]          add rax, [rbx + rsi + matrix]
   119 000000CD 4883C604                    add rsi, 4 ; проходимся по элементам строки
   120 000000D1 E2F2                        loop cycle2 ; цикл по элементам столбца
   121                                  
   122                                      ;если сумма равна нулю, то мы сразу переходим к новой строке, иначе мы печатаем строку
   123 000000D3 83F800                      cmp eax, 0  ; не знаю почему,но во внутреннем представлении rax когда он должен быть равен нулю,но он ему совсем не равен
   124                                                  ;пришлось заменять на eax, не приятно конечно,но терпимо
   125 000000D6 0F84B1000000                je zero
   126                                  
   127 000000DC B901000000                  mov rcx, 1 ; счетчик элементов в столбце
   128                                      ;здесь нужно сделать printf всей строки
   129 000000E1 51                          push rcx ; сохраняем счетчик
   130 000000E2 56                          push rsi
   131 000000E3 488B83[00000000]            mov rax, [rbx + matrix]
   132 000000EA 48BE-                       mov rsi, OutBuf
   132 000000EC [0000000000000000] 
   133 000000F4 E807FFFFFF                  call IntToStr64
   134                                  
   135                                      ; print the number    
   136 000000F9 B801000000                  mov rax, 1
   137 000000FE BF01000000                  mov rdi, 1
   138 00000103 48BE-                       mov rsi, OutBuf
   138 00000105 [0000000000000000] 
   139 0000010D BA02000000                  mov rdx, lenOut
   140 00000112 0F05                        syscall
   141                                  
   142                                      ; print the number    
   143 00000114 B801000000                  mov rax, 1
   144 00000119 BF01000000                  mov rdi, 1
   145 0000011E 48BE-                       mov rsi, Space
   145 00000120 [2C00000000000000] 
   146 00000128 BA01000000                  mov rdx, 1
   147 0000012D 0F05                        syscall
   148                                  
   149 0000012F 5E                          pop rsi
   150 00000130 59                          pop rcx
   151                                  
   152 00000131 BE04000000                  mov rsi, 4 ; смещение для другого столбца, но все той-же строки
   153                                  cyclePrintOut:
   154 00000136 51                          push rcx ; сохраняем счетчик
   155 00000137 56                          push rsi
   156                                  
   157 00000138 488B8433[00000000]          mov rax, [rbx + rsi + matrix]
   158 00000140 48BE-                       mov rsi, OutBuf
   158 00000142 [0000000000000000] 
   159 0000014A E8B1FEFFFF                  call IntToStr64
   160                                  
   161                                      ; print the number    
   162 0000014F B801000000                  mov rax, 1
   163 00000154 BF01000000                  mov rdi, 1
   164 00000159 48BE-                       mov rsi, OutBuf
   164 0000015B [0000000000000000] 
   165 00000163 BA02000000                  mov rdx, lenOut
   166 00000168 0F05                        syscall
   167                                  
   168                                      ; print the space    
   169 0000016A B801000000                  mov rax, 1
   170 0000016F BF01000000                  mov rdi, 1
   171 00000174 48BE-                       mov rsi, Space
   171 00000176 [2C00000000000000] 
   172 0000017E BA01000000                  mov rdx, 1
   173 00000183 0F05                        syscall
   174                                  
   175 00000185 5E                          pop rsi
   176                                  
   177 00000186 4883C604                    add rsi, 4; смещение для другого столбца, но все той-же строки
   178 0000018A 59                          pop rcx
   179 0000018B E2A9                       loop cyclePrintOut
   180                                  
   181                                  zero:
   182 0000018D 59                          pop rcx ; восстановили счетчик
   183                                  
   184 0000018E 4883C308                    add rbx, 8 ; перешли к следующей строке
   185 00000192 48FFC9                      dec rcx
   186 00000195 0F8518FFFFFF                jnz cycle1 ; цикл по строкам
   187                                  
   188                                  exit:
   189 0000019B B83C000000                  mov rax, 60; системная функция 60 (exit)
   190 000001A0 4831FF                      xor rdi, rdi; return code 0
   191 000001A3 0F05                        syscall; вызов системной функции
