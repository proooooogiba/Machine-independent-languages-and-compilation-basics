     1                                  %include "lib.asm"
     2                              <1> section .text     ; ������� ����
     3                              <1> IntToStr64: 
     4 00000000 57                  <1>          push   rdi
     5 00000001 53                  <1>          push   rbx
     6 00000002 52                  <1>          push   rdx
     7 00000003 51                  <1>          push   rcx
     8 00000004 56                  <1> 		 push   rsi
     9 00000005 C60600              <1> 		 mov    byte[rsi],0 ; �� ����� �����
    10 00000008 83F800              <1>          cmp    eax,0
    11 0000000B 7D05                <1>          jge    .l1
    12 0000000D F7D8                <1>          neg    eax
    13 0000000F C6062D              <1>          mov    byte[rsi],'-'
    14 00000012 C646060A            <1> .l1      mov    byte[rsi+6],10
    15 00000016 BF05000000          <1>          mov    rdi,5
    16 0000001B 66BB0A00            <1>          mov    bx,10
    17 0000001F 6699                <1> .again:  cwd           ; ��������� ����� �� ��������
    18 00000021 66F7F3              <1>          div    bx     ; ����� ��������� �� 10
    19 00000024 80C230              <1>          add    dl,30h ; �������� �� ������� ��� �����
    20 00000027 88143E              <1>          mov    [rsi+rdi],dl ; ����� ������ � ������
    21 0000002A 48FFCF              <1>          dec    rdi    ; ��������� ��������� ��  
    22                              <1>                        ; ���������� �������
    23 0000002D 6683F800            <1>          cmp    ax, 0  ; ������������� ��� �����?
    24 00000031 75EC                <1>          jne    .again
    25 00000033 B906000000          <1>          mov    rcx, 6
    26 00000038 4829F9              <1>          sub    rcx, rdi ; ����� ����������+����
    27 0000003B 4889C8              <1> 		 mov    rax,rcx
    28 0000003E 48FFC0              <1> 		 inc    rax    ; ����� ����������+OA
    29 00000041 48FFC6              <1>          inc    rsi    ; ���������� ����
    30 00000044 56                  <1> 		 push   rsi
    31 00000045 488D343E            <1>          lea    rsi,[rsi+rdi] ; ������ ����������
    32 00000049 5F                  <1> 		 pop    rdi
    33 0000004A F3A4                <1>          rep movsb
    34 0000004C 5E                  <1>          pop    rsi  
    35 0000004D 59                  <1>          pop    rcx
    36 0000004E 5A                  <1>          pop    rdx
    37 0000004F 5B                  <1>          pop    rbx
    38 00000050 5F                  <1>          pop    rdi
    39 00000051 C3                  <1>          ret
    40                              <1> StrToInt64:
    41 00000052 57                  <1>          push   rdi
    42 00000053 B739                <1>          mov    bh, '9'
    43 00000055 B330                <1>          mov    bl, '0'
    44 00000057 56                  <1>          push   rsi     ; ��������� ����� �������� ������
    45 00000058 803E2D              <1>          cmp    byte[rsi], '-'
    46 0000005B 7503                <1>          jne    .prod
    47 0000005D 48FFC6              <1>          inc    rsi     ; ���������� ����
    48 00000060 FC                  <1> .prod    cld
    49 00000061 6631FF              <1>          xor    di, di  ; �������� ������� �����
    50 00000064 AC                  <1> .cycle:  lodsb          ; ��������� ������ (�����)
    51 00000065 3C0A                <1>          cmp    al, 10  ; ���� 10, �� �� �����
    52 00000067 741F                <1>          je     .Return
    53 00000069 38D8                <1>          cmp    al, bl  ; ���������� � ����� ����
    54 0000006B 722F                <1>          jb     .Error  ; "����" � ������
    55 0000006D 38F8                <1>          cmp    al, bh  ; ���������� � ����� ������ 
    56 0000006F 772B                <1>          ja     .Error  ; "����" � ������
    57 00000071 2C30                <1>          sub    al, 30h ; �������� ����� �� �������
    58 00000073 6698                <1>          cbw            ; ��������� �� �����
    59 00000075 6650                <1>          push   ax      ; ��������� � �����
    60 00000077 66B80A00            <1>          mov    ax, 10  ; ������� 10 � AX
    61 0000007B 66F7E7              <1>          mul    di      ; ��������, ��������� � DX:AX
    62 0000007E 665F                <1>          pop    di      ; � DI � ��������� �����
    63 00000080 6601F8              <1>          add    ax, di
    64 00000083 6689C7              <1>          mov    di, ax  ; � DI � ����������� �����        
    65 00000086 EBDC                <1>          jmp    .cycle
    66 00000088 5E                  <1> .Return: pop    rsi
    67 00000089 BB00000000          <1>          mov    rbx, 0
    68 0000008E 803E2D              <1>          cmp    byte[rsi], '-'
    69 00000091 7503                <1>          jne    .J
    70 00000093 66F7DF              <1>          neg    di
    71 00000096 6689F8              <1> .J       mov    ax, di
    72 00000099 98                  <1>          cwde
    73 0000009A EB0B                <1>          jmp    .R
    74 0000009C 5E                  <1> .Error:  pop    rsi
    75 0000009D B800000000          <1>          mov    rax, 0
    76 000000A2 BB01000000          <1>          mov    rbx, 1
    77 000000A7 5F                  <1> .R       pop    rdi
    78 000000A8 C3                  <1>          ret
     2                                  
     3                                  section .data
     4 00000000 4C696E652077697468-         ExitMsg db "Line with zero sum is found", 0xA ; выводимое сообщение
     4 00000009 207A65726F2073756D-
     4 00000012 20697320666F756E64-
     4 0000001B 0A                 
     5 0000001C 2020                        Space db "  "
     6 0000001E 0A                          NewLine: db 0xA
     7                                      lenExit equ $-ExitMsg
     8                                  
     9 0000001F 496E707574206D6174-         StartMsg db "Input matrix looks following : ", 0xA ; выводимое сообщение
     9 00000028 726978206C6F6F6B73-
     9 00000031 20666F6C6C6F77696E-
     9 0000003A 67203A200A         
    10                                      lenStart equ $-StartMsg
    11                                  
    12 0000003F 526573756C74206D61-         ResMsg db "Result matrix looks following : ", 0xA ; выводимое сообщение
    12 00000048 74726978206C6F6F6B-
    12 00000051 7320666F6C6C6F7769-
    12 0000005A 6E67203A200A       
    13                                      lenRes equ $-ResMsg
    14                                  
    15 00000060 496E707574206D6174-         InputMsg db "Input matrix from keyboard(along the lines) : ", 0xA ; выводимое сообщение
    15 00000069 7269782066726F6D20-
    15 00000072 6B6579626F61726428-
    15 0000007B 616C6F6E6720746865-
    15 00000084 206C696E657329203A-
    15 0000008D 200A               
    16                                      lenInput equ $-InputMsg
    17                                  
    18 0000008F 496E70757420656C65-         InputLineMsg db "Input element of the line one by one from keyboard : ", 0xA ; выводимое сообщение
    18 00000098 6D656E74206F662074-
    18 000000A1 6865206C696E65206F-
    18 000000AA 6E65206279206F6E65-
    18 000000B3 2066726F6D206B6579-
    18 000000BC 626F617264203A200A 
    19                                      lenLineInput equ $-InputLineMsg
    20                                  
    21                                  
    22                                  section .bss
    23 00000000 <res 50h>                   matrix resd 20
    24 00000050 ????                        OutBuf resb 2 ; буфер для выводимой строки, он должен быть 2 или 4
    25                                                    ;должен быть 4, но пока оставим костыль, можно ввожить только 0 
    26                                      lenOut equ $-OutBuf
    27 00000052 ????????????????            InBuf resd 2 ; буфер для вводимой строки
    28                                      lenIn equ $-InBuf
    29                                  
    30                                  section .text
    31                                      global _start
    32                                  
    33                                  _start:
    34 000000A9 E8D2010000                  call PrintInputMsg
    35 000000AE E8E9010000                  call PrintInputLineMsg
    36                                  
    37 000000B3 BB00000000                  mov rbx, 0 ; смещение элемента столбца в строке
    38 000000B8 B905000000                  mov rcx, 5 ; количество строк
    39                                  cycleInput1:; мы проходимся по столбцам
    40 000000BD 51                          push rcx ; сохраняем счетчик
    41 000000BE B903000000                  mov rcx, 3 ; счетчик элементов в столбце - 1
    42                                      
    43 000000C3 51                          push rcx ; сохраняем счетчик
    44 000000C4 53                          push rbx
    45 000000C5 E842020000                  call InputNumber
    46                                  
    47 000000CA 48BF-                       mov rdi, InBuf; Pass address of input buffer to StrToInt64
    47 000000CC [5200000000000000] 
    48 000000D4 E879FFFFFF                  call StrToInt64
    49 000000D9 4883FB00                    cmp rbx, 0
    50 000000DD 0F85(00000000)              jne 0
    51 000000E3 5B                          pop rbx
    52 000000E4 488983[00000000]            mov [rbx + matrix], rax;content of InBuf goes to rax
    53 000000EB 59                          pop rcx
    54                                  
    55 000000EC BE04000000                  mov rsi, 4 ; смещение для другого столбца, но все той-же строки
    56                                  cycleInput2:
    57 000000F1 51                          push rcx ; сохраняем счетчик
    58 000000F2 56                          push rsi
    59 000000F3 53                          push rbx
    60                                      
    61 000000F4 E813020000                  call InputNumber
    62                                  
    63 000000F9 48BF-                       mov rdi, InBuf; Pass address of input buffer to StrToInt64
    63 000000FB [5200000000000000] 
    64 00000103 E84AFFFFFF                  call StrToInt64
    65 00000108 4883FB00                    cmp rbx, 0
    66 0000010C 0F85(00000000)              jne 0 ;content of InBuf goes to rax
    67 00000112 5B                          pop rbx
    68 00000113 5E                          pop rsi
    69 00000114 48898433[00000000]          mov [rbx + rsi + matrix], rax
    70                                  
    71 0000011C 4883C604                    add rsi, 4; смещение для другого столбца, но все той-же строки
    72 00000120 59                          pop rcx
    73 00000121 E2CE                        loop cycleInput2 ; цикл по элементам столбца
    74                                  
    75                                      ; print line element's expectation
    76 00000123 E874010000                  call PrintInputLineMsg
    77                                  
    78 00000128 59                          pop rcx
    79 00000129 4883C310                    add rbx, 16 ; перешли к следующей строке
    80 0000012D 48FFC9                      dec rcx
    81 00000130 758B                        jnz cycleInput1 ; цикл по столбцам
    82                                  
    83 00000132 B801000000                  mov rax, 1
    84 00000137 BF01000000                  mov rdi, 1
    85 0000013C 48BE-                       mov rsi, StartMsg
    85 0000013E [1F00000000000000] 
    86 00000146 BA20000000                  mov rdx, lenStart
    87 0000014B 0F05                        syscall
    88                                  
    89 0000014D BB00000000                  mov rbx, 0 ; смещение элемента столбца в строке
    90 00000152 B905000000                  mov rcx, 5 ; количество строк
    91                                  ; мы проходимся по столбцам
    92                                  cyclePrint1: 
    93 00000157 51                          push rcx ; сохраняем счетчик
    94 00000158 B903000000                  mov rcx, 3 ; счетчик элементов в столбцов - 1
    95                                      
    96 0000015D 51                          push rcx ; сохраняем счетчик
    97 0000015E 56                          push rsi
    98                                  
    99 0000015F 488B83[00000000]            mov rax, [rbx + matrix]
   100 00000166 48BE-                       mov rsi, OutBuf
   100 00000168 [5000000000000000] 
   101 00000170 E88BFEFFFF                  call IntToStr64
   102                                  
   103                                      ; print the number    
   104 00000175 E85A010000                  call PrintNumber
   105                                  
   106 0000017A E839010000                  call PrintSpace
   107                                  
   108 0000017F 5E                          pop rsi
   109 00000180 59                          pop rcx
   110                                  
   111 00000181 BE04000000                  mov rsi, 4 ; смещение для другого столбца, но все той-же строки
   112                                  cyclePrint2:
   113 00000186 51                          push rcx ; сохраняем счетчик
   114 00000187 56                          push rsi
   115                                  
   116 00000188 488B8433[00000000]          mov rax, [rbx + rsi + matrix]
   117 00000190 48BE-                       mov rsi, OutBuf
   117 00000192 [5000000000000000] 
   118 0000019A E861FEFFFF                  call IntToStr64
   119                                  
   120 0000019F E830010000                  call PrintNumber
   121                                  
   122 000001A4 E80F010000                  call PrintSpace
   123                                  
   124 000001A9 5E                          pop rsi
   125                                  
   126 000001AA 4883C604                    add rsi, 4; смещение для другого столбца, но все той-же строки
   127 000001AE 59                          pop rcx
   128 000001AF E2D5                        loop cyclePrint2 ; цикл по элементам столбца
   129                                  
   130 000001B1 E83A010000                  call PrintNewLine
   131 000001B6 59                          pop rcx
   132                                  
   133 000001B7 4883C310                    add rbx, 16 ; перешли к следующей строке
   134 000001BB 48FFC9                      dec rcx
   135 000001BE 7597                        jnz cyclePrint1 ; цикл по столбцам
   136                                  
   137 000001C0 B801000000                  mov rax, 1
   138 000001C5 BF01000000                  mov rdi, 1
   139 000001CA 48BE-                       mov rsi, ResMsg
   139 000001CC [3F00000000000000] 
   140 000001D4 BA21000000                  mov rdx, lenRes
   141 000001D9 0F05                        syscall
   142                                  
   143 000001DB BB00000000                  mov rbx, 0 ; смещение элемента столбца в строке
   144 000001E0 B905000000                  mov rcx, 5 ; количество строк
   145                                  cycle1:
   146 000001E5 51                          push rcx ; сохраняем счетчик
   147 000001E6 B903000000                  mov rcx, 3 ; счетчик элементов в строке - 1
   148 000001EB 488B83[00000000]            mov rax, [rbx + matrix]; будем использовать как сумму элементов для строки
   149 000001F2 BE04000000                  mov rsi, 4 ; проходимся по элементам строки
   150                                  cycle2:
   151 000001F7 48038433[00000000]          add rax, [rbx + rsi + matrix]
   152 000001FF 4883C604                    add rsi, 4 ; проходимся по элементам строки
   153 00000203 E2F2                        loop cycle2 ; цикл по элементам столбца
   154                                  
   155                                      ;если сумма равна нулю, то мы сразу переходим к новой строке, иначе мы печатаем строку
   156 00000205 83F800                      cmp eax, 0  ; не знаю почему,но во внутреннем представлении rax когда он должен быть равен нулю,но он ему совсем не равен
   157                                                  ;пришлось заменять на eax, не приятно конечно,но терпимо
   158 00000208 745E                        je if_zero
   159                                  
   160 0000020A B903000000                  mov rcx, 3 ; счетчик элементов в столбце
   161                                      ;здесь нужно сделать printf всей строки
   162 0000020F 51                          push rcx ; сохраняем счетчик
   163 00000210 56                          push rsi
   164 00000211 488B83[00000000]            mov rax, [rbx + matrix]
   165 00000218 48BE-                       mov rsi, OutBuf
   165 0000021A [5000000000000000] 
   166 00000222 E8D9FDFFFF                  call IntToStr64
   167                                  
   168 00000227 E8A8000000                  call PrintNumber
   169 0000022C E887000000                  call PrintSpace
   170                                  
   171 00000231 5E                          pop rsi
   172 00000232 59                          pop rcx
   173                                  
   174 00000233 BE04000000                  mov rsi, 4 ; смещение для другого столбца, но все той-же строки
   175                                  cyclePrintOut:
   176 00000238 51                          push rcx ; сохраняем счетчик
   177 00000239 56                          push rsi
   178                                  
   179 0000023A 488B8433[00000000]          mov rax, [rbx + rsi + matrix]
   180 00000242 48BE-                       mov rsi, OutBuf
   180 00000244 [5000000000000000] 
   181 0000024C E8AFFDFFFF                  call IntToStr64
   182                                  
   183 00000251 E87E000000                  call PrintNumber
   184 00000256 E85D000000                  call PrintSpace
   185                                  
   186 0000025B 5E                          pop rsi
   187                                  
   188 0000025C 4883C604                    add rsi, 4; смещение для другого столбца, но все той-же строки
   189 00000260 59                          pop rcx
   190 00000261 E2D5                       loop cyclePrintOut
   191                                  
   192 00000263 E888000000                  call PrintNewLine
   193                                  
   194                                  if_zero:
   195 00000268 59                          pop rcx ; восстановили счетчик
   196 00000269 4883C310                    add rbx, 16 ; перешли к следующей строке
   197 0000026D 48FFC9                      dec rcx
   198                                      
   199 00000270 0F856FFFFFFF                jnz cycle1 ; цикл по строкам
   200                                  
   201                                  exit:
   202 00000276 B83C000000                  mov rax, 60; системная функция 60 (exit)
   203 0000027B 4831FF                      xor rdi, rdi; return code 0
   204 0000027E 0F05                        syscall; вызов системной функции
   205                                  
   206                                  
   207                                  PrintInputMsg:
   208 00000280 B801000000                  mov rax, 1
   209 00000285 BF01000000                  mov rdi, 1
   210 0000028A 48BE-                       mov rsi, InputMsg
   210 0000028C [6000000000000000] 
   211 00000294 BA2F000000                  mov rdx, lenInput
   212 00000299 0F05                        syscall
   213 0000029B C3                          ret
   214                                  
   215                                  PrintInputLineMsg: ; print line element's expectation
   216 0000029C B801000000                  mov rax, 1
   217 000002A1 BF01000000                  mov rdi, 1
   218 000002A6 48BE-                       mov rsi, InputLineMsg
   218 000002A8 [8F00000000000000] 
   219 000002B0 BA36000000                  mov rdx, lenLineInput
   220 000002B5 0F05                        syscall
   221 000002B7 C3                          ret
   222                                  
   223                                  PrintSpace:    
   224 000002B8 B801000000                  mov rax, 1
   225 000002BD BF01000000                  mov rdi, 1
   226 000002C2 48BE-                       mov rsi, Space
   226 000002C4 [1C00000000000000] 
   227 000002CC BA01000000                  mov rdx, 1
   228 000002D1 0F05                        syscall
   229 000002D3 C3                          ret
   230                                  
   231                                  PrintNumber:
   232 000002D4 B801000000                  mov rax, 1
   233 000002D9 BF01000000                  mov rdi, 1
   234 000002DE 48BE-                       mov rsi, OutBuf
   234 000002E0 [5000000000000000] 
   235 000002E8 BA02000000                  mov rdx, lenOut
   236 000002ED 0F05                        syscall
   237 000002EF C3                          ret
   238                                  
   239                                  PrintNewLine:
   240 000002F0 B801000000                  mov rax, 1
   241 000002F5 BF01000000                  mov rdi, 1
   242 000002FA 48BE-                       mov rsi, NewLine
   242 000002FC [1E00000000000000] 
   243 00000304 BA01000000                  mov rdx, 1
   244 00000309 0F05                        syscall
   245 0000030B C3                          ret
   246                                  
   247                                  InputNumber:
   248 0000030C B800000000                  mov rax, 0 ; System call 0 for read
   249 00000311 BF00000000                  mov rdi, 0 ; File descriptor for stdin
   250 00000316 48BE-                       mov rsi, InBuf ; Address of input buffer
   250 00000318 [5200000000000000] 
   251 00000320 BA08000000                  mov rdx, lenIn ; Maximum length to read
   252 00000325 0F05                        syscall
   253 00000327 C3                          ret
