     1                                  %include "lib.asm"
     2                              <1> section .text     ; ������� ����
     3                              <1> IntToStr64: 
     4 00000000 57                  <1>          push   rdi
     5 00000001 53                  <1>          push   rbx
     6 00000002 52                  <1>          push   rdx
     7 00000003 51                  <1>          push   rcx
     8 00000004 56                  <1> 		 push   rsi
     9 00000005 C60600              <1> 		 mov    byte[rsi],0 ; �� ����� �����
    10 00000008 83F800              <1>          cmp    eax,0
    11 0000000B 7D05                <1>          jge    .l1
    12 0000000D F7D8                <1>          neg    eax
    13 0000000F C6062D              <1>          mov    byte[rsi],'-'
    14 00000012 C646060A            <1> .l1      mov    byte[rsi+6],10
    15 00000016 BF05000000          <1>          mov    rdi,5
    16 0000001B 66BB0A00            <1>          mov    bx,10
    17 0000001F 6699                <1> .again:  cwd           ; ��������� ����� �� ��������
    18 00000021 66F7F3              <1>          div    bx     ; ����� ��������� �� 10
    19 00000024 80C230              <1>          add    dl,30h ; �������� �� ������� ��� �����
    20 00000027 88143E              <1>          mov    [rsi+rdi],dl ; ����� ������ � ������
    21 0000002A 48FFCF              <1>          dec    rdi    ; ��������� ��������� ��  
    22                              <1>                        ; ���������� �������
    23 0000002D 6683F800            <1>          cmp    ax, 0  ; ������������� ��� �����?
    24 00000031 75EC                <1>          jne    .again
    25 00000033 B906000000          <1>          mov    rcx, 6
    26 00000038 4829F9              <1>          sub    rcx, rdi ; ����� ����������+����
    27 0000003B 4889C8              <1> 		 mov    rax,rcx
    28 0000003E 48FFC0              <1> 		 inc    rax    ; ����� ����������+OA
    29 00000041 48FFC6              <1>          inc    rsi    ; ���������� ����
    30 00000044 56                  <1> 		 push   rsi
    31 00000045 488D343E            <1>          lea    rsi,[rsi+rdi] ; ������ ����������
    32 00000049 5F                  <1> 		 pop    rdi
    33 0000004A F3A4                <1>          rep movsb
    34 0000004C 5E                  <1>          pop    rsi  
    35 0000004D 59                  <1>          pop    rcx
    36 0000004E 5A                  <1>          pop    rdx
    37 0000004F 5B                  <1>          pop    rbx
    38 00000050 5F                  <1>          pop    rdi
    39 00000051 C3                  <1>          ret
    40                              <1> StrToInt64:
    41 00000052 57                  <1>          push   rdi
    42 00000053 B739                <1>          mov    bh, '9'
    43 00000055 B330                <1>          mov    bl, '0'
    44 00000057 56                  <1>          push   rsi     ; ��������� ����� �������� ������
    45 00000058 803E2D              <1>          cmp    byte[rsi], '-'
    46 0000005B 7503                <1>          jne    .prod
    47 0000005D 48FFC6              <1>          inc    rsi     ; ���������� ����
    48 00000060 FC                  <1> .prod    cld
    49 00000061 6631FF              <1>          xor    di, di  ; �������� ������� �����
    50 00000064 AC                  <1> .cycle:  lodsb          ; ��������� ������ (�����)
    51 00000065 3C0A                <1>          cmp    al, 10  ; ���� 10, �� �� �����
    52 00000067 741F                <1>          je     .Return
    53 00000069 38D8                <1>          cmp    al, bl  ; ���������� � ����� ����
    54 0000006B 722F                <1>          jb     .Error  ; "����" � ������
    55 0000006D 38F8                <1>          cmp    al, bh  ; ���������� � ����� ������ 
    56 0000006F 772B                <1>          ja     .Error  ; "����" � ������
    57 00000071 2C30                <1>          sub    al, 30h ; �������� ����� �� �������
    58 00000073 6698                <1>          cbw            ; ��������� �� �����
    59 00000075 6650                <1>          push   ax      ; ��������� � �����
    60 00000077 66B80A00            <1>          mov    ax, 10  ; ������� 10 � AX
    61 0000007B 66F7E7              <1>          mul    di      ; ��������, ��������� � DX:AX
    62 0000007E 665F                <1>          pop    di      ; � DI � ��������� �����
    63 00000080 6601F8              <1>          add    ax, di
    64 00000083 6689C7              <1>          mov    di, ax  ; � DI � ����������� �����        
    65 00000086 EBDC                <1>          jmp    .cycle
    66 00000088 5E                  <1> .Return: pop    rsi
    67 00000089 BB00000000          <1>          mov    rbx, 0
    68 0000008E 803E2D              <1>          cmp    byte[rsi], '-'
    69 00000091 7503                <1>          jne    .J
    70 00000093 66F7DF              <1>          neg    di
    71 00000096 6689F8              <1> .J       mov    ax, di
    72 00000099 98                  <1>          cwde
    73 0000009A EB0B                <1>          jmp    .R
    74 0000009C 5E                  <1> .Error:  pop    rsi
    75 0000009D B800000000          <1>          mov    rax, 0
    76 000000A2 BB01000000          <1>          mov    rbx, 1
    77 000000A7 5F                  <1> .R       pop    rdi
    78 000000A8 C3                  <1>          ret
     2                                  
     3                                  section .data
     4 00000000 4C696E652077697468-         ExitMsg db "Line with zero sum is found", 0xA ; выводимое сообщение
     4 00000009 207A65726F2073756D-
     4 00000012 20697320666F756E64-
     4 0000001B 0A                 
     5 0000001C 20                          Space db " "
     6 0000001D 0A                          NewLine: db 0xA
     7                                      lenExit equ $-ExitMsg
     8                                  
     9 0000001E 496E707574206D6174-         StartMsg db "Input matrix looks following : ", 0xA ; выводимое сообщение
     9 00000027 726978206C6F6F6B73-
     9 00000030 20666F6C6C6F77696E-
     9 00000039 67203A200A         
    10                                      lenStart equ $-StartMsg
    11                                  
    12 0000003E 526573756C74206D61-         ResMsg db "Result matrix looks following : ", 0xA ; выводимое сообщение
    12 00000047 74726978206C6F6F6B-
    12 00000050 7320666F6C6C6F7769-
    12 00000059 6E67203A200A       
    13                                      lenRes equ $-ResMsg
    14                                  
    15 0000005F 496E707574206D6174-         InputMsg db "Input matrix from keyboard(along the lines) : ", 0xA ; выводимое сообщение
    15 00000068 7269782066726F6D20-
    15 00000071 6B6579626F61726428-
    15 0000007A 616C6F6E6720746865-
    15 00000083 206C696E657329203A-
    15 0000008C 200A               
    16                                      lenInput equ $-InputMsg
    17                                  
    18 0000008E 496E70757420656C65-         InputLineMsg db "Input element of the line one by one from keyboard : ", 0xA ; выводимое сообщение
    18 00000097 6D656E74206F662074-
    18 000000A0 6865206C696E65206F-
    18 000000A9 6E65206279206F6E65-
    18 000000B2 2066726F6D206B6579-
    18 000000BB 626F617264203A200A 
    19                                      lenLineInput equ $-InputLineMsg
    20                                  
    21                                  
    22                                  section .bss
    23 00000000 <res 40h>                   matrix resd 16
    24 00000040 ????                        OutBuf resb 2 ; буфер для выводимой строки, он должен быть 2 или 4
    25                                                    ;должен быть 4, но пока оставим костыль, можно ввожить только 0 
    26                                      lenOut equ $-OutBuf
    27 00000042 ????????????????            InBuf resd 2 ; буфер для вводимой строки
    28                                      lenIn equ $-InBuf
    29                                  
    30                                  section .text
    31                                      global _start
    32                                  
    33                                  _start:
    34 000000A9 B801000000                  mov rax, 1
    35 000000AE BF01000000                  mov rdi, 1
    36 000000B3 48BE-                       mov rsi, InputMsg
    36 000000B5 [5F00000000000000] 
    37 000000BD BA2F000000                  mov rdx, lenInput
    38 000000C2 0F05                        syscall
    39                                  
    40                                      ; print line element's expectation
    41 000000C4 B801000000                  mov rax, 1
    42 000000C9 BF01000000                  mov rdi, 1
    43 000000CE 48BE-                       mov rsi, InputLineMsg
    43 000000D0 [8E00000000000000] 
    44 000000D8 BA36000000                  mov rdx, lenLineInput
    45 000000DD 0F05                        syscall
    46                                  
    47 000000DF BB00000000                  mov rbx, 0 ; смещение элемента столбца в строке
    48 000000E4 B902000000                  mov rcx, 2 ; количество строк
    49 000000E9 51                          push rcx ; сохраняем счетчик
    50                                  cycleInput1:; мы проходимся по столбцам
    51 000000EA B901000000                  mov rcx, 1 ; счетчик элементов в столбце - 1
    52                                      
    53 000000EF 51                          push rcx ; сохраняем счетчик
    54 000000F0 53                          push rbx
    55 000000F1 B800000000                  mov rax, 0 ; System call 0 for read
    56 000000F6 BF00000000                  mov rdi, 0 ; File descriptor for stdin
    57 000000FB 48BE-                       mov rsi, InBuf ; Address of input buffer
    57 000000FD [4200000000000000] 
    58 00000105 BA08000000                  mov rdx, lenIn ; Maximum length to read
    59 0000010A 0F05                        syscall
    60                                  
    61 0000010C 48BF-                       mov rdi, InBuf; Pass address of input buffer to StrToInt64
    61 0000010E [4200000000000000] 
    62 00000116 E837FFFFFF                  call StrToInt64
    63 0000011B 4883FB00                    cmp rbx, 0
    64 0000011F 0F85(00000000)              jne 0
    65 00000125 5B                          pop rbx
    66 00000126 488983[00000000]            mov [rbx + matrix], rax;content of InBuf goes to rax
    67 0000012D 59                          pop rcx
    68                                  
    69 0000012E BE04000000                  mov rsi, 4 ; смещение для другого столбца, но все той-же строки
    70                                  cycleInput2:
    71 00000133 51                          push rcx ; сохраняем счетчик
    72 00000134 56                          push rsi
    73 00000135 53                          push rbx
    74 00000136 B800000000                  mov rax, 0 ; System call 0 for read
    75 0000013B BF00000000                  mov rdi, 0 ; File descriptor for stdin
    76 00000140 48BE-                       mov rsi, InBuf ; Address of input buffer
    76 00000142 [4200000000000000] 
    77 0000014A BA08000000                  mov rdx, lenIn ; Maximum length to read
    78 0000014F 0F05                        syscall
    79                                  
    80 00000151 48BF-                       mov rdi, InBuf; Pass address of input buffer to StrToInt64
    80 00000153 [4200000000000000] 
    81 0000015B E8F2FEFFFF                  call StrToInt64
    82 00000160 4883FB00                    cmp rbx, 0
    83 00000164 0F85(00000000)              jne 0 ;content of InBuf goes to rax
    84 0000016A 5B                          pop rbx
    85 0000016B 5E                          pop rsi
    86 0000016C 48898433[00000000]          mov [rbx + rsi + matrix], rax
    87                                  
    88 00000174 4883C604                    add rsi, 4; смещение для другого столбца, но все той-же строки
    89 00000178 59                          pop rcx
    90 00000179 E2B8                        loop cycleInput2 ; цикл по элементам столбца
    91                                  
    92                                      ; print line element's expectation
    93 0000017B B801000000                  mov rax, 1
    94 00000180 BF01000000                  mov rdi, 1
    95 00000185 48BE-                       mov rsi, InputLineMsg
    95 00000187 [8E00000000000000] 
    96 0000018F BA36000000                  mov rdx, lenLineInput
    97 00000194 0F05                        syscall
    98                                  
    99 00000196 59                          pop rcx
   100 00000197 4883C308                    add rbx, 8 ; перешли к следующей строке
   101 0000019B 48FFC9                      dec rcx
   102 0000019E 0F8546FFFFFF                jnz cycleInput1 ; цикл по столбцам
   103                                  
   104 000001A4 B801000000                  mov rax, 1
   105 000001A9 BF01000000                  mov rdi, 1
   106 000001AE 48BE-                       mov rsi, StartMsg
   106 000001B0 [1E00000000000000] 
   107 000001B8 BA20000000                  mov rdx, lenStart
   108 000001BD 0F05                        syscall
   109                                  
   110 000001BF BB00000000                  mov rbx, 0 ; смещение элемента столбца в строке
   111 000001C4 B902000000                  mov rcx, 2 ; количество строк
   112                                      
   113                                  
   114                                  ; мы проходимся по столбцам
   115                                  cyclePrint1: 
   116 000001C9 51                          push rcx ; сохраняем счетчик
   117 000001CA B901000000                  mov rcx, 1 ; счетчик элементов в столбцов - 1
   118                                      
   119 000001CF 51                          push rcx ; сохраняем счетчик
   120 000001D0 56                          push rsi
   121                                  
   122 000001D1 488B83[00000000]            mov rax, [rbx + matrix]
   123 000001D8 48BE-                       mov rsi, OutBuf
   123 000001DA [4000000000000000] 
   124 000001E2 E819FEFFFF                  call IntToStr64
   125                                  
   126                                      ; print the number    
   127 000001E7 B801000000                  mov rax, 1
   128 000001EC BF01000000                  mov rdi, 1
   129 000001F1 48BE-                       mov rsi, OutBuf
   129 000001F3 [4000000000000000] 
   130 000001FB BA02000000                  mov rdx, lenOut
   131 00000200 0F05                        syscall
   132                                  
   133                                      ; print the number    
   134 00000202 B801000000                  mov rax, 1
   135 00000207 BF01000000                  mov rdi, 1
   136 0000020C 48BE-                       mov rsi, Space
   136 0000020E [1C00000000000000] 
   137 00000216 BA01000000                  mov rdx, 1
   138 0000021B 0F05                        syscall
   139                                  
   140 0000021D 5E                          pop rsi
   141 0000021E 59                          pop rcx
   142                                  
   143 0000021F BE04000000                  mov rsi, 4 ; смещение для другого столбца, но все той-же строки
   144                                  cyclePrint2:
   145 00000224 51                          push rcx ; сохраняем счетчик
   146 00000225 56                          push rsi
   147                                  
   148 00000226 488B8433[00000000]          mov rax, [rbx + rsi + matrix]
   149 0000022E 48BE-                       mov rsi, OutBuf
   149 00000230 [4000000000000000] 
   150 00000238 E8C3FDFFFF                  call IntToStr64
   151                                  
   152                                      ; print the number    
   153 0000023D B801000000                  mov rax, 1
   154 00000242 BF01000000                  mov rdi, 1
   155 00000247 48BE-                       mov rsi, OutBuf
   155 00000249 [4000000000000000] 
   156 00000251 BA02000000                  mov rdx, lenOut
   157 00000256 0F05                        syscall
   158                                  
   159                                      ; print the space    
   160 00000258 B801000000                  mov rax, 1
   161 0000025D BF01000000                  mov rdi, 1
   162 00000262 48BE-                       mov rsi, Space
   162 00000264 [1C00000000000000] 
   163 0000026C BA01000000                  mov rdx, 1
   164 00000271 0F05                        syscall
   165                                  
   166 00000273 5E                          pop rsi
   167                                  
   168 00000274 4883C604                    add rsi, 4; смещение для другого столбца, но все той-же строки
   169 00000278 59                          pop rcx
   170 00000279 E2A9                        loop cyclePrint2 ; цикл по элементам столбца
   171                                  
   172                                      ; print the NewLine character
   173 0000027B B801000000                  mov rax, 1
   174 00000280 BF01000000                  mov rdi, 1
   175 00000285 48BE-                       mov rsi, NewLine
   175 00000287 [1D00000000000000] 
   176 0000028F BA01000000                  mov rdx, 1
   177 00000294 0F05                        syscall
   178                                  
   179 00000296 59                          pop rcx
   180                                  
   181 00000297 4883C308                    add rbx, 8 ; перешли к следующей строке
   182 0000029B 48FFC9                      dec rcx
   183 0000029E 0F8525FFFFFF                jnz cyclePrint1 ; цикл по столбцам
   184                                  
   185                                  
   186 000002A4 B801000000                  mov rax, 1
   187 000002A9 BF01000000                  mov rdi, 1
   188 000002AE 48BE-                       mov rsi, ResMsg
   188 000002B0 [3E00000000000000] 
   189 000002B8 BA21000000                  mov rdx, lenRes
   190 000002BD 0F05                        syscall
   191                                  
   192                                      ;я ёбаный гений блять
   193 000002BF BB00000000                  mov rbx, 0 ; смещение элемента столбца в строке
   194 000002C4 B902000000                  mov rcx, 2 ; количество строк
   195                                  cycle1:
   196 000002C9 51                          push rcx ; сохраняем счетчик
   197 000002CA B901000000                  mov rcx, 1 ; счетчик элементов в строке - 1
   198 000002CF 488B83[00000000]            mov rax, [rbx + matrix]; будем использовать как сумму элементов для строки
   199 000002D6 BE04000000                  mov rsi, 4 ; проходимся по элементам строки
   200                                  cycle2:
   201 000002DB 48038433[00000000]          add rax, [rbx + rsi + matrix]
   202 000002E3 4883C604                    add rsi, 4 ; проходимся по элементам строки
   203 000002E7 E2F2                        loop cycle2 ; цикл по элементам столбца
   204                                  
   205                                      ;если сумма равна нулю, то мы сразу переходим к новой строке, иначе мы печатаем строку
   206 000002E9 83F800                      cmp eax, 0  ; не знаю почему,но во внутреннем представлении rax когда он должен быть равен нулю,но он ему совсем не равен
   207                                                  ;пришлось заменять на eax, не приятно конечно,но терпимо
   208 000002EC 0F84CC000000                je if_zero
   209                                  
   210 000002F2 B901000000                  mov rcx, 1 ; счетчик элементов в столбце
   211                                      ;здесь нужно сделать printf всей строки
   212 000002F7 51                          push rcx ; сохраняем счетчик
   213 000002F8 56                          push rsi
   214 000002F9 488B83[00000000]            mov rax, [rbx + matrix]
   215 00000300 48BE-                       mov rsi, OutBuf
   215 00000302 [4000000000000000] 
   216 0000030A E8F1FCFFFF                  call IntToStr64
   217                                  
   218                                      ; print the number    
   219 0000030F B801000000                  mov rax, 1
   220 00000314 BF01000000                  mov rdi, 1
   221 00000319 48BE-                       mov rsi, OutBuf
   221 0000031B [4000000000000000] 
   222 00000323 BA02000000                  mov rdx, lenOut
   223 00000328 0F05                        syscall
   224                                  
   225                                      ; print the number
   226 0000032A B801000000                  mov rax, 1
   227 0000032F BF01000000                  mov rdi, 1
   228 00000334 48BE-                       mov rsi, Space
   228 00000336 [1C00000000000000] 
   229 0000033E BA01000000                  mov rdx, 1
   230 00000343 0F05                        syscall
   231                                  
   232 00000345 5E                          pop rsi
   233 00000346 59                          pop rcx
   234                                  
   235 00000347 BE04000000                  mov rsi, 4 ; смещение для другого столбца, но все той-же строки
   236                                  cyclePrintOut:
   237 0000034C 51                          push rcx ; сохраняем счетчик
   238 0000034D 56                          push rsi
   239                                  
   240 0000034E 488B8433[00000000]          mov rax, [rbx + rsi + matrix]
   241 00000356 48BE-                       mov rsi, OutBuf
   241 00000358 [4000000000000000] 
   242 00000360 E89BFCFFFF                  call IntToStr64
   243                                  
   244                                      ; print the number    
   245 00000365 B801000000                  mov rax, 1
   246 0000036A BF01000000                  mov rdi, 1
   247 0000036F 48BE-                       mov rsi, OutBuf
   247 00000371 [4000000000000000] 
   248 00000379 BA02000000                  mov rdx, lenOut
   249 0000037E 0F05                        syscall
   250                                  
   251                                      ; print the space    
   252 00000380 B801000000                  mov rax, 1
   253 00000385 BF01000000                  mov rdi, 1
   254 0000038A 48BE-                       mov rsi, Space
   254 0000038C [1C00000000000000] 
   255 00000394 BA01000000                  mov rdx, 1
   256 00000399 0F05                        syscall
   257                                  
   258                                      ; print the space    
   259 0000039B B801000000                  mov rax, 1
   260 000003A0 BF01000000                  mov rdi, 1
   261 000003A5 48BE-                       mov rsi, NewLine
   261 000003A7 [1D00000000000000] 
   262 000003AF BA01000000                  mov rdx, 1
   263 000003B4 0F05                        syscall
   264                                  
   265 000003B6 5E                          pop rsi
   266                                  
   267 000003B7 4883C604                    add rsi, 4; смещение для другого столбца, но все той-же строки
   268 000003BB 59                          pop rcx
   269 000003BC E28E                       loop cyclePrintOut
   270                                  
   271                                  if_zero:
   272 000003BE 59                          pop rcx ; восстановили счетчик
   273 000003BF 4883C308                    add rbx, 8 ; перешли к следующей строке
   274 000003C3 48FFC9                      dec rcx
   275 000003C6 0F85FDFEFFFF                jnz cycle1 ; цикл по строкам
   276                                  
   277                                  exit:
   278 000003CC B83C000000                  mov rax, 60; системная функция 60 (exit)
   279 000003D1 4831FF                      xor rdi, rdi; return code 0
   280 000003D4 0F05                        syscall; вызов системной функции
